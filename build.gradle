buildscript {
    ext { springBootVersion = '2.3.3.RELEASE'
	      hibernateVersion = '5.11.5.Final'
		  swaggerVersion = '3.0.0'
		 }
		repositories {
			mavenCentral()
			maven { url 'https://jitpack.io' }
		}
    dependencies { classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    			   classpath files("lib/gradle-js-plugin-2.14.2-SNAPSHOT.jar")     			   
    			  }
}

plugins {
  id "com.eriwen.gradle.js" version "2.14.1"
  id "com.gorylenko.gradle-git-properties" version "2.2.3"
  id 'de.undercouch.download' version '4.1.1'
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'jacoco'

jar {
    archiveBaseName = 'viglet-shio'
    archiveVersion =  '0.3.8'
}

eclipse {
    classpath {
        file {
            whenMerged {
                def src = entries.find { it.path == 'src/main/resources' }
                src.excludes = ['**']
            }
        }
    }

}

gitProperties {
    extProperty = 'gitProps' // git properties will be put in a map at project.ext.gitProps
}

bootJar {
	launchScript() // executable jar
    manifest {
    	attributes(    
        'Implementation-Version': "${-> project.jar.version + '-' + project.ext.gitProps['git.commit.id.abbrev']}"
    	)
  	} 
}

repositories {
	mavenCentral()
	maven { url 'https://jitpack.io' }
}

sourceCompatibility = 11
targetCompatibility = 11

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

task jsdocjs(type: com.eriwen.gradle.js.tasks.JsDocTask) {
    source = ["src/main/resources/js/server-side"]
    destinationDir = file("docs/javascript")
}

// Combine JS files
task combineSystemJs(type: com.eriwen.gradle.js.tasks.CombineJsTask) {
    source = "${projectDir}/src/main/resources/ui/js/src/system"
    dest = "${projectDir}/src/main/resources/ui/js/build/shSystem.js"
}

task combineFeatureJs(dependsOn: ':combineSystemJs', type: com.eriwen.gradle.js.tasks.CombineJsTask) {
    source = "${projectDir}/src/main/resources/ui/js/src/feature"
    dest = "${projectDir}/src/main/resources/ui/js/build/shFeature.js"
}

task combineAllJs(dependsOn: ':combineFeatureJs', type: com.eriwen.gradle.js.tasks.CombineJsTask) {
    source = ["${projectDir}/src/main/resources/ui/js/src/main/__shFactory.js", "${projectDir}/src/main/resources/ui/js/build/shSystem.js", "${projectDir}/src/main/resources/ui/js/build/shFeature.js"]
    dest = "${projectDir}/src/main/resources/ui/js/build/shio.js"
}

task minifyAllJs(dependsOn: ':combineAllJs', type: com.eriwen.gradle.js.tasks.MinifyJsTask) {
 	source = "${projectDir}/src/main/resources/ui/js/build/shio.js"
    dest = file("${projectDir}/src/main/resources/ui/public/js/dist/shio.min.js")
    closure {
		compilerOptions.languageIn="ECMASCRIPT6"
		compilerOptions.languageOut="ECMASCRIPT5"
        warningLevel = 'QUIET'
    }
}

// Shio Stock
def stockZipDir = "$projectDir/shio-media-master"
def stockZipFile = "$projectDir/shio-media.zip"
def stockDir = "$projectDir/src/main/resources/ui/public/media/"

task deleteGitStock(type: Delete) {
    delete "$stockZipDir", "$stockZipFile"
}

task downloadStockZipFile(dependsOn: deleteGitStock, type: Download) {
    src 'https://github.com/ShioCMS/shio-media/archive/master.zip'
    dest stockZipFile
}

task downloadAndUnzipStockZipFile(dependsOn: downloadStockZipFile, type: Copy) {
    from zipTree(downloadStockZipFile.dest)
    into projectDir
}


task installStock(type:Exec) {
	dependsOn "downloadAndUnzipStockZipFile"
	workingDir "$stockZipDir"
	inputs.dir "$stockZipDir"
	group = BasePlugin.BUILD_GROUP
	
	if (System.getProperty("os.name").toUpperCase().contains("WINDOWS")){
		commandLine "npm.cmd", "install"
	} else {
		commandLine "npm", "install"
	}
}

task deleteStockDir(type: Delete) {
	dependsOn "installStock"
    delete "$stockDir"
}

task createStockDir {
	dependsOn "deleteStockDir"
	doLast {
		mkdir "$stockDir"
	}
}

task buildStock(type:Exec) {
	dependsOn "createStockDir"
	workingDir "$stockZipDir"
	inputs.dir "$stockZipDir"
	
	group = BasePlugin.BUILD_GROUP
	
	if (System.getProperty("os.name").toUpperCase().contains("WINDOWS")){
		commandLine "ng.cmd", "build", "--outputPath", "$stockDir", "--base-href", "/stock/"
	} else {
		commandLine "ng", "build", "--outputPath", "$stockDir", "--base-href", "/stock/"
	}
}

task graphQLDocs(type:Exec) {
commandLine "graphdoc","--force", "-e",  "http://localhost:2710/graphql", "-o", "./docs/graphql"
}

task stage(dependsOn: ['build', 'clean'])

compileJava.dependsOn(['minifyAllJs'])

build.dependsOn(['buildStock'])

build.mustRunAfter clean

javadoc {
    source = sourceSets.main.allJava
    classpath = configurations.compile
    destinationDir = file("docs/core")
}

dependencies {
    
    // Spring Boot
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: "${springBootVersion}"    
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa', version: "${springBootVersion}"
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-parent', version:"${springBootVersion}"
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-security', version:"${springBootVersion}"
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-activemq', version:"${springBootVersion}"   
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-thymeleaf', version:"${springBootVersion}"
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version:"${springBootVersion}"
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-cache', version:"${springBootVersion}"
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-mail', version:"${springBootVersion}"
	compile group: 'org.springframework.boot', name: 'spring-boot-starter-json', version:"${springBootVersion}"

	// Viglet Turing
	implementation 'com.github.openturing:turing-java-sdk:0.3.3-SNAPSHOT'

  	// Spring
  	compile group: 'org.springframework', name: 'spring-test', version: '5.2.8.RELEASE'
  	    
  	// Jackson
    compile group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-hibernate5', version: '2.11.2'
   
   	// Oracle	
	compile group: 'com.oracle.ojdbc', name: 'ojdbc8', version: '19.3.0.0'
	
    // H2
    compile group: 'com.h2database', name: 'h2', version:'1.4.200'

	// MariaDB
    compile group: 'org.mariadb.jdbc', name: 'mariadb-java-client', version: '2.6.2'

    // Apache Commons
    compile group: 'org.apache.commons', name: 'commons-compress', version: '1.20'   
    compile group: 'commons-io', name: 'commons-io', version:'2.7'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.11'
	compile group: 'org.apache.commons', name: 'commons-text', version: '1.9'

    
    // Apache POI
    compile group: 'org.apache.poi', name: 'poi', version: '4.1.2'
    compile group: 'org.apache.poi', name: 'poi-ooxml', version: '4.1.2'
    
    // JSoup
	compile group: 'org.jsoup', name: 'jsoup', version: '1.13.1'
	
	// Hibernate
	compile group: 'org.hibernate', name: 'hibernate-search-engine', version: "${hibernateVersion}"
	compile group: 'org.hibernate', name: 'hibernate-search-orm', version: "${hibernateVersion}"
	
	//Hazelcast
	compile group: 'com.hazelcast', name: 'hazelcast', version : '4.0.1'	
	compile group: 'com.hazelcast', name: 'hazelcast-spring', version: '4.0.2'
	
	
	// Swagger 2
	compile group: 'io.springfox', name: 'springfox-swagger2', version: "${swaggerVersion}"
	compile group: 'io.springfox', name: 'springfox-swagger-ui', version: "${swaggerVersion}"
	
	// Gson - is used by reCAPTCHA
	compile group: 'com.google.code.gson', name: 'gson', version: '2.8.6'

	// Thumbnailator
    compile group: 'net.coobird', name: 'thumbnailator', version: '0.4.12'
	
	// Tika
    compile group: 'org.apache.tika', name: 'tika-core', version:'1.24.1'
    compile group: 'org.apache.tika', name: 'tika-parsers', version:'1.24.1'
    
	// Javadoc - Need this package
	compile 'javax.interceptor:javax.interceptor-api:1.2.2'
	
	// LDAP
	compile group: 'ldapsdk', name: 'ldapsdk', version: '4.1'
	
	// Git 
	compile group: 'org.eclipse.jgit', name: 'org.eclipse.jgit', version: '5.8.1.202007141445-r'
		
	// GraphQL
	implementation 'com.graphql-java:graphql-java:2020-10-09T06-02-11-8e55666'
	implementation 'com.graphql-java:graphql-java-spring-webmvc:2020-07-12T23-24-35-c6606f6'	
	implementation 'com.graphql-java:graphql-java-extended-scalars:1.0.1'
	implementation 'io.projectreactor:reactor-core:3.3.9.RELEASE'

	// Color Thief
	compile group: 'de.androidpit', name: 'color-thief', version: '1.1.2'

	// Guava
	implementation 'com.google.guava:guava:29.0-jre'
	
	// WebJars
	compile 'org.webjars:jquery:1.12.4'
	compile 'org.webjars.bower:jquery.ui:1.12.1'
	compile 'org.webjars:bootstrap:3.3.7-1' // Content
	compile 'org.webjars.bower:bootstrap:4.5.1' // Preview
	compile 'org.webjars.npm:moment:2.27.0'
	compile 'org.webjars.npm:angular:1.8.0'
	compile 'org.webjars.bower:ace-builds:1.4.12'
	compile 'org.webjars.bower:tinymce:5.4.1'
	compile 'org.webjars.bower:angular-ui-router:1.0.20'
	compile 'org.webjars.npm:angular-translate:2.18.3'		
	compile 'org.webjars.npm:angular-resource:1.8.0'
	compile 'org.webjars.npm:angular-animate:1.8.0'
	compile 'org.webjars.npm:angular-sanitize:1.8.0'
	compile 'org.webjars.bower:angular-bootstrap:2.5.0'
	compile 'org.webjars.npm:angular-cookies:1.8.0'
	compile 'org.webjars.bower:angular-moment:1.2.0'
	compile 'org.webjars.bower:angular-ui-ace:0.2.3'
	compile 'org.webjars.bower:font-awesome:4.7.0'
	compile 'org.webjars.bower:ng-file-upload:12.2.13'
	compile 'org.webjars.bower:angular-ui-notification:0.3.6'
	compile 'org.webjars.bower:angular-ui-tinymce:0.0.19'
	compile 'org.webjars.bower:angular-ui-sortable:0.19.0'
	compile 'org.webjars.bower:angular-ui-select:0.19.8'
	compile 'org.webjars.bower:ngInfiniteScroll:1.3.4'
	compile 'org.webjars:angular-avatar:1.3.0'
	compile 'org.webjars.bower:angular-bootstrap-toggle:0.4.2'

	testImplementation('org.springframework.boot:spring-boot-starter-test')
}

test {
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }
    
 jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled false
    }
}

bootRun {
    if (project.hasProperty('args')) {
        args project.args.split(',')
    }
}
   
check.dependsOn jacocoTestReport   

}